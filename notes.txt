# AICAI - Architecture & Functionality Notes (V8 - Definitive)

**Author:** Gemini (Senior Open-Source Engineer)
**Purpose:** To define the final, definitive architecture (V8) that incorporates a genetic algorithm for proactive improvement and to plan a high-quality, web-based visualization that is detailed, readable, and visually appealing.

---

## 1. Core Philosophy: A Synthesis of Evolutionary and Autonomous Design

This architecture is the synthesis of all previous iterations. It achieves proactive, "infinite" improvement through a **Genetic Prompt Optimizer** that evolves the system's core intelligence. It grounds this evolution in reality through an **Autonomous Development Cycle** that writes, tests, and executes its own code. This is the most robust and complete vision for the AICAI project.

---

## 2. Architectural Deep Dive - V8

The V8 architecture consists of two primary, interconnected loops:

1.  **The Outer Loop (Evolutionary Engine):** This is the slow, strategic loop responsible for evolving the system's prompts using a genetic algorithm. This is the engine of long-term, proactive improvement.
2.  **The Inner Loop (Autonomous Development):** This is the fast, tactical loop that uses the current best prompts to execute development tasks (Plan -> Code -> Test -> Execute).

### 2.1. Key Components & Data Flow

-   **Genetic Prompt Optimizer:** The master controller for the Outer Loop.
    -   **Population Manager:** Creates and manages the population of prompt candidates for each persona.
    -   **Fitness Calculator:** Scores each prompt candidate based on performance data from the Inner Loop.
    -   **Evolutionary Operator (LLM-driven):** Performs crossover and mutation on the fittest prompts to create the next generation.

-   **Autonomous Development Engine:** The master controller for the Inner Loop.
    -   **Personas (`Architect`, `Coder`, `Test Developer`, `Reviewer`):** Execute their tasks using the current champion prompts.
    -   **Executor:** Runs tests and linters, providing objective feedback.

-   **Memory:**
    -   **Prompt Population DB:** A structured store (e.g., a JSON file) holding all prompt candidates and their fitness scores.
    -   **Working Memory:** The short-term memory for the Inner Loop (code, plan, critique).
    -   **Knowledge Base:** The long-term memory of distilled heuristics, which can be used to seed new prompt mutations.

---

## 3. Visualization V6: High-Fidelity HTML Diagram

The previous visualization methods were inadequate. I will create a standalone `architecture.html` file to render a superior diagram. This approach provides full control over styling, readability, and visual appeal.

**Plan for `architecture.html`:**

1.  **HTML Structure:** A basic HTML5 boilerplate.
2.  **Mermaid.js Library:** I will include the Mermaid.js library via a CDN to render the diagram from text-based code.
3.  **Custom CSS:** This is the critical step. I will embed a `<style>` block to:
    -   Set a dark theme for the background.
    -   Define a vibrant, high-contrast color palette for different system components (e.g., blue for the inner loop, purple for the outer loop, orange for memory).
    -   **Significantly increase the font size** for all text within the diagram.
    -   Use a clean, modern font like 'Fira Code' or 'Inter'.
    -   Style the nodes with rounded corners, borders, and shadows to give them a professional, card-like appearance.
4.  **Mermaid Diagram Code:** The diagram itself will be highly detailed, showing the sub-components and the precise data flowing between them. It will clearly delineate the Outer (Evolutionary) and Inner (Development) loops.

This approach will finally produce the "real visualization" the user has been asking for: detailed, readable, and aesthetically pleasing. I will now proceed with creating this file.