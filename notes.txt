# AICAI - Architecture & Functionality Notes (V10 - Definitive)

**Author:** Gemini (Senior Open-Source Engineer)
**Purpose:** To define the final, definitive architecture (V10). This version abandons the flawed genetic algorithm analogy in favor of a more powerful and intuitive model: **Cognitive Recalibration**, driven by a Self-Writing Meta-Prompt. This architecture is specifically designed for maximum efficiency and effectiveness with small language models.

---

## 1. Core Philosophy: Cognitive Recalibration

The fundamental flaw in previous designs was the method of improvement. A truly intelligent system, especially one with limited resources, should not rely on brute-force evolutionary methods. Instead, it should perform **root-cause analysis** and **rewrite its own logic** based on reasoned conclusions. 

This architecture is built on that principle. The system's core improvement mechanism is a **Cognitive Recalibration Cycle**, where a high-level reasoning agent (the Meta-Prompt) analyzes the system's performance and intelligently rewrites the operational instructions for its subordinate agents. This is analogous to a senior engineer observing a team, identifying systemic flaws in their workflow, and writing a new, improved standard operating procedure.

---

## 2. Architectural Deep Dive - V10

### 2.1. The Self-Writing Meta-Prompt

This is the heart of the new architecture. It is a single, powerful LLM prompt that functions as the system's executive reasoning core.

-   **Objective:** To generate and refine the operational prompts used by the specialized agents.
-   **Process:** At the end of a task cycle, the Meta-Prompt is invoked with a comprehensive performance report.
-   **Input:** 
    -   The user's high-level goal.
    -   The complete set of previously used operational prompts.
    -   A structured performance log including: test pass/fail rates, linting errors, code churn (how much code had to be changed to fix bugs), and efficiency metrics (token usage, execution time).
-   **Task:** "You are an expert AI Systems Architect. Your goal is to optimize a team of specialized AI agents. Analyze the provided performance report and the prompts that produced it. Identify the root cause of any failures or inefficiencies. Your output must be a complete, rewritten set of operational prompts in JSON format. These new prompts must be designed to prevent the observed failures and improve overall performance in the next cycle."
-   **Output:** A JSON object containing the new, improved operational prompts for all agents.

### 2.2. The Task Execution Engine

This is the "team" of specialized agents that perform the actual work, guided by the prompts generated by the Meta-Prompt.

-   **`CodeGenerationAgent`:** Uses its current operational prompt to write code that satisfies a specific task.
-   **`TestGenerationAgent`:** Uses its current operational prompt to write unit tests for the code produced by the Code Generation Agent.
-   **`VerificationModule`:** A non-LLM component that executes the tests and static analysis tools, capturing the objective performance data.

### 2.3. The Cognitive Recalibration Cycle

1.  **Execute:** The Task Execution Engine runs, using the current set of operational prompts to complete a task. The Verification Module logs all performance data.
2.  **Analyze & Synthesize:** The Meta-Prompt is invoked. It analyzes the performance data and the prompts that generated it.
3.  **Recalibrate:** The Meta-Prompt writes a new, superior set of operational prompts.
4.  **Replace:** The old operational prompts are replaced with the new, improved set.
5.  The cycle repeats on the next task, now operating with an improved cognitive framework.

### 2.4. Why This is Optimized for Small Models

-   **Reduced Complexity:** It replaces the complex, multi-step process of selection, crossover, and mutation with a single, powerful reasoning step. This is a more direct and efficient use of the LLM.
-   **Focused Reasoning:** A small model excels at focused, context-rich tasks. The Meta-Prompt provides exactly that: a clear goal, specific data to analyze, and a structured output format. It's a difficult but well-defined problem, perfect for a small model to tackle.
-   **High-Impact Changes:** Instead of making tiny, random mutations, the Meta-Prompt can make large, intelligent changes to the operational prompts based on a holistic analysis, leading to much faster improvements.

---

## 4. Visualization V8: Interactive Web Application

To finally meet the user's expectations, I will build a multi-file, interactive web visualization.

-   `architecture.html`: The core HTML structure.
-   `style.css`: A dedicated stylesheet for a professional, modern, and visually appealing design.
-   `script.js`: JavaScript to enable interactivity, allowing the user to click on components to get detailed explanations.

This will provide a truly professional and informative representation of the definitive V10 architecture.