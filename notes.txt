# AICAI - Architecture & Functionality Notes (V16 - Definitive)

**Author:** Gemini (Senior Open-Source Engineer)
**Purpose:** To define the final, definitive V16 architecture. This version implements a Hierarchical, Multi-Cycle System for Autonomous Scientific Discovery, a more plausible and detailed model inspired by the operational layers of advanced research systems. This design is robust, detailed, and specifically structured to be effective with a constrained LLM.

---

## 1. Core Philosophy: Hierarchical, Multi-Cycle Operation

This architecture abandons the simplistic, single-loop model in favor of a more realistic, hierarchical structure. The system operates on three distinct timescales, or cycles, each with a specific purpose. This separation of concerns allows for a more organized, plausible, and efficient approach to autonomous research, making it manageable for a small model.

1.  **The Macro-Cycle (Strategic Research):** The slowest, highest level of thinking. It sets the broad research agenda.
2.  **The Meso-Cycle (Experimental Design):** The middle layer, where a research direction is turned into a concrete, testable experiment.
3.  **The Micro-Cycle (Engineering & Verification):** The fastest, lowest level of operation, where the experiment is executed and code is generated and tested.

---

## 2. Architectural Deep Dive - V16

### 2.1. The Macro-Cycle: The `Director` Agent

-   **Role:** The system's strategic director.
-   **Timescale:** Runs infrequently (e.g., once every N experiments).
-   **Task:** To set the overall research direction. It analyzes the long-term trends from the `ExperimentDatabase` and consults the `CognitionArchive` to identify broad, promising areas for exploration. It does not design experiments itself; it writes a **Research Mandate**.
-   **Example Research Mandate:** "The system has reached a plateau in improving code efficiency. The `CognitionArchive` contains several papers on asynchronous programming. *Mandate:* Initiate a series of experiments to determine if adopting an asynchronous, event-driven model can improve performance without sacrificing correctness."

### 2.2. The Meso-Cycle: The `Researcher` & `Designer` Agents

-   **Role:** The system's scientists.
-   **Timescale:** Runs once per experiment.
-   **Task:** To turn a `ResearchMandate` into a specific experiment.
    1.  The **`Researcher` Agent** receives the mandate, consults the relevant papers in the `CognitionArchive`, and formulates a single, testable **Hypothesis**.
    2.  The **`Designer` Agent** receives the hypothesis and designs the **Challenger Prompt Set** that will be used to test it.

### 2.3. The Micro-Cycle: The `Engineer` Agent

-   **Role:** The system's hands-on developer.
-   **Timescale:** Runs continuously to execute the experiment.
-   **Task:** To run the `Code -> Test -> Self-Revise` loop. This is the fast, inner loop that generates and debugs the code until it passes all functional tests.

### 2.4. The `Critic` and `Analyst` Agents

-   These agents remain as previously designed, providing the essential qualitative assessment and composite fitness scoring that guide the entire system.

---

## 3. Visualization V13: The Definitive Hierarchical Model

I will now create the final, professional, and guaranteed-to-work interactive visualization. It will be a static SVG with manually embedded interactivity to ensure robustness and avoid all previous rendering errors. It will clearly illustrate the three distinct cycles of operation.
